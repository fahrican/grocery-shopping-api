openapi: 3.0.1
info:
  title: Grocery Shopping REST API v1
  description: |-
    This API exposes RESTful authentication and authorization via JWT. It also provides CRUD operations managing grocery buying.

    Some useful links:
    - [GitHUb source code](https://github.com/fahrican/grocery-shopping-api)
  license:
    name: MIT License
    url: https://github.com/fahrican/grocery-shopping-api/blob/main/LICENSE.txt
  version: 1.0.0
servers:
  - url: http://localhost:9000
    description: DEVELOPMENT
  - url: https://grocery-manager.my-domain.xyz/
    description: PRODUCTION
security:
  - BearerAuth: [ ]
paths:
  /api/v1/user/username:
    patch:
      tags:
        - user-resource
      summary: change username
      operationId: changeUsername
      description: method to change the current username
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                type: string
                example:
                  username: abu-hasan
              description: username to sign in
              example:
                username: abu-hasan
        required: true
      responses:
        '200':
          description: Updating the username was successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfoResponse'
  /api/v1/user/password:
    patch:
      tags:
        - user-resource
      summary: change user password
      operationId: changePassword
      description: method to change user password
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPasswordUpdateRequest'
        required: true
      responses:
        '200':
          description: Updating the password was successful
          content:
            application/json: { }
  /api/v1/user/info:
    patch:
      tags:
        - user-resource
      summary: update user information
      operationId: updateInfo
      description: method to update user information like name, surname ect.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInfoUpdateRequest'
        required: true
      responses:
        '200':
          description: Updating information was successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfoResponse'
  /api/v1/user/email:
    patch:
      tags:
        - user-resource
      summary: change user email
      operationId: changeEmail
      description: method to change user email
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                type: string
              description: Email to sign in
              example:
                email: "hello@gmail.com"
        required: true
      responses:
        '200':
          description: Updating the EMAIL was successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfoResponse'
  /api/v1/user:
    get:
      tags:
        - user-resource
      summary: fetch user information
      operationId: fetchInfo
      description: method to get all entered information from the current logged in user
      responses:
        '200':
          description: Updating information was successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfoResponse'

  /api/v1/auth/sign-up:
    post:
      tags:
        - authentication-resource
      summary: sign-up user
      operationId: signUp
      description: methods to sign-up user or inform about sign-up problems
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
        required: true
      responses:
        '201':
          description: sign-up was successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailConfirmedResponse'
        '409':
          description: Invalid sign-up
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /api/v1/auth/sign-in:
    post:
      tags:
        - authentication-resource
      summary: sign-in user
      operationId: signIn
      description: methods to sign-in user or inform about sign-in problems
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticationRequest'
        required: true
      responses:
        '200':
          description: sign-in was successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationResponse'
        '401':
          description: Invalid sign-in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /api/v1/auth/password-reset:
    post:
      tags:
        - authentication-resource
      summary: reset user password
      operationId: requestPasswordReset
      description: methods to reset user password or inform about reset problems
      parameters:
        - name: email
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: resetting password was successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailConfirmedResponse'
        '401':
          description: Couldn't reset password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /api/v1/auth/verify:
    get:
      tags:
        - authentication-resource
      summary: verify user
      operationId: verifyUser
      description: methods to verify user or inform about verification problem
      parameters:
        - name: token
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: email verification was successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailConfirmedResponse'
        '403':
          description: Verification step not complete
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'

  /api/v1/shopping-lists:
    get:
      tags:
        - shopping-list-resource
      summary: Get all shopping lists
      operationId: getShoppingLists
      description: methods to get all closed and open shopping lists
      parameters:
        - name: is-done
          in: query
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: all open & closed shopping lists
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ShoppingListResponse'
    post:
      tags:
        - shopping-list-resource
      summary: Create a new shopping list
      operationId: createShoppingList
      description: method to create a new shopping list or inform about invalid input
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShoppingListCreateRequest'
        required: true
      responses:
        '201':
          description: shopping list successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShoppingListResponse'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /api/v1/shopping-lists/{id}:
    get:
      tags:
        - shopping-list-resource
      summary: Get shopping list by its ID
      operationId: getShoppingListById
      description: method to get a shopping list by its ID or inform about not found
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Found the shopping list by the supplied ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShoppingListResponse'
        '404':
          description: shopping list not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
    delete:
      tags:
        - shopping-list-resource
      summary: Delete a shopping list by its ID
      operationId: deleteShoppingList
      description: method to delete a shopping list by its ID or inform does not exist
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: shopping list successfully deleted
        '404':
          description: shopping list not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
    patch:
      tags:
        - shopping-list-resource
      summary: Update an existing shopping list
      operationId: updateShoppingList
      description: method to update an existing shopping list or inform does not exist
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShoppingListUpdateRequest'
        required: true
      responses:
        '200':
          description: shopping list successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShoppingListResponse'
        '404':
          description: shopping list not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'

  /api/v1/shopping-lists/{listId}/shopping-list-items/{itemId}/grocery-item:
    get:
      tags:
        - grocery-item-resource
      summary: Get grocery item
      operationId: getGroceryItem
      description: method to fetch grocery item
      parameters:
        - name: listId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: itemId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Found the grocery item by the supplied IDs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroceryItemResponse'
        '404':
          description: grocery item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /api/v1/shopping-lists/{listId}/shopping-list-items/{itemId}/grocery-item/{groceryId}:
    patch:
      tags:
        - grocery-item-resource
      summary: Update grocery item
      operationId: updateGroceryItem
      description: method to update grocery item
      parameters:
        - name: listId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: itemId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: groceryId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroceryItemUpdateRequest'
        required: true
      responses:
        '200':
          description: grocery item successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroceryItemResponse'
        '404':
          description: grocery item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'

components:
  schemas:
    RegisterRequest:
      required:
        - email
        - firstName
        - lastName
        - password
        - passwordConfirmation
        - username
      type: object
      properties:
        firstName:
          type: string
          maxLength: 30
          pattern: \w+
        lastName:
          type: string
          maxLength: 30
          pattern: \w+
        email:
          type: string
        username:
          type: string
        password:
          type: string
        passwordConfirmation:
          type: string
    EmailConfirmedResponse:
      required:
        - message
      type: object
      properties:
        message:
          type: string
    AuthenticationRequest:
      required:
        - password
        - username
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    AuthenticationResponse:
      required:
        - accessToken
        - refreshToken
      type: object
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string
    UserInfoResponse:
      required:
        - email
        - firstName
        - lastName
        - username
      type: object
      properties:
        firstName:
          type: string
          maxLength: 30
          pattern: \w+
        lastName:
          type: string
          maxLength: 30
          pattern: \w+
        email:
          type: string
        username:
          type: string
    UserPasswordUpdateRequest:
      required:
        - currentPassword
        - newPassword
        - newPasswordConfirmation
      type: object
      properties:
        currentPassword:
          type: string
        newPassword:
          type: string
        newPasswordConfirmation:
          type: string
    UserInfoUpdateRequest:
      type: object
      properties:
        firstName:
          type: string
          maxLength: 30
          pattern: \w+
        lastName:
          type: string
    ShoppingListResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the ShoppingList
        receiptPictureUrl:
          type: string
          format: string
          nullable: true
          description: URL to the picture of the receipt
        isDone:
          type: boolean
          description: Indicates if the shopping list is completed
        supermarket:
          $ref: '#/components/schemas/SupermarketResponse'
          nullable: true
        shoppingListItems:
          type: array
          items:
            $ref: '#/components/schemas/ShoppingListItemResponse'
        totalAmount:
          type: number
          format: float
          nullable: true
          description: Total amount of the shopping list
    ShoppingListItemResponse:
      required:
        - id
        - quantity
        - price
        - groceryItem
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the ShoppingListItem
        quantity:
          type: integer
          description: Quantity of the grocery item
        price:
          type: number
          format: float
          description: Price of the grocery item
        groceryItem:
          $ref: '#/components/schemas/GroceryItemResponse'
          nullable: true
    ShoppingListItemCreateRequest:
      required:
        - quantity
        - price
        - groceryItem
      type: object
      properties:
        quantity:
          type: integer
          description: Quantity of the grocery item
        price:
          type: number
          format: float
          description: Price of the grocery item
        groceryItem:
          type: object
          $ref: '#/components/schemas/GroceryItemCreateRequest'
          nullable: true
    SupermarketResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the Supermarket
        name:
          $ref: '#/components/schemas/Hypermarket'
    SupermarketCreateRequest:
      required:
        - name
      type: object
      properties:
        name:
          $ref: '#/components/schemas/Hypermarket'
    Category:
      type: string
      enum:
        - FRUITS
        - CEREAL
        - VEGETABLES
        - CANNED_GOODS
        - DAIRY
        - MEAT
        - FISH
        - SEAFOOD
        - DELI
        - SPICES
        - BREAD
        - BAKERY
        - BEVERAGES
        - PASTA
        - RICE
        - BAKING
        - SNACKS
        - SWEET
        - FROZEN_FOOD
        - ICE_CREAM
        - HOUSEHOLD_SUPPLIES
        - PET_FOOD
        - OTHER
    Hypermarket:
      type: string
      enum:
        - BILLA
        - SPAR
        - LIDL
        - HOFER
        - ETSAN
        - OTHER
    GroceryItemResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the Grocery Item
        name:
          type: string
          description: Name of the grocery item
        category:
          $ref: '#/components/schemas/Category'
    ShoppingListCreateRequest:
      required:
        - supermarket
        - shoppingListItems
      type: object
      properties:
        receiptPictureUrl:
          type: string
          format: string
          nullable: true
          description: URL to the image of the receipt (optional).
        supermarket:
          $ref: '#/components/schemas/SupermarketCreateRequest'
          description: Details of the supermarket associated with the shopping list.
        shoppingListItems:
          type: array
          items:
            $ref: '#/components/schemas/ShoppingListItemCreateRequest'
          description: List of items included in the shopping list.
    GroceryItemCreateRequest:
      required:
        - name
        - category
      type: object
      properties:
        name:
          type: string
          description: Name of the grocery item
        category:
          $ref: '#/components/schemas/Category'
    GroceryItemUpdateRequest:
      type: object
      properties:
        name:
          type: string
          description: Name of the grocery item
        category:
          $ref: '#/components/schemas/Category'
    ShoppingListUpdateRequest:
      type: object
      properties:
        totalAmount:
          type: number
          format: float
          nullable: true
          description: Total monetary amount of the shopping list (optional).
        receiptPictureUrl:
          type: string
          format: string
          nullable: true
          description: URL to the image of the receipt (optional).
        isDone:
          type: boolean
          nullable: true
          description: Status indicating if the shopping list is completed (optional).
        supermarket:
          type: object
          $ref: '#/components/schemas/SupermarketCreateRequest'
          nullable: true
          description: Details of the supermarket associated with the shopping list (optional).
        shoppingListItems:
          type: array
          items:
            $ref: '#/components/schemas/ShoppingListItemCreateRequest'
          nullable: true
          description: List of items included in the shopping list (optional).
    ApiError:
      required:
        - code
        - status
        - timestamp
      type: object
      properties:
        message:
          type: string
        status:
          type: string
          enum:
            - 100 CONTINUE
            - 101 SWITCHING_PROTOCOLS
            - 102 PROCESSING
            - 103 EARLY_HINTS
            - 103 CHECKPOINT
            - 200 OK
            - 201 CREATED
            - 202 ACCEPTED
            - 203 NON_AUTHORITATIVE_INFORMATION
            - 204 NO_CONTENT
            - 205 RESET_CONTENT
            - 206 PARTIAL_CONTENT
            - 207 MULTI_STATUS
            - 208 ALREADY_REPORTED
            - 226 IM_USED
            - 300 MULTIPLE_CHOICES
            - 301 MOVED_PERMANENTLY
            - 302 FOUND
            - 302 MOVED_TEMPORARILY
            - 303 SEE_OTHER
            - 304 NOT_MODIFIED
            - 305 USE_PROXY
            - 307 TEMPORARY_REDIRECT
            - 308 PERMANENT_REDIRECT
            - 400 BAD_REQUEST
            - 401 UNAUTHORIZED
            - 402 PAYMENT_REQUIRED
            - 403 FORBIDDEN
            - 404 NOT_FOUND
            - 405 METHOD_NOT_ALLOWED
            - 406 NOT_ACCEPTABLE
            - 407 PROXY_AUTHENTICATION_REQUIRED
            - 408 REQUEST_TIMEOUT
            - 409 CONFLICT
            - 410 GONE
            - 411 LENGTH_REQUIRED
            - 412 PRECONDITION_FAILED
            - 413 PAYLOAD_TOO_LARGE
            - 413 REQUEST_ENTITY_TOO_LARGE
            - 414 URI_TOO_LONG
            - 414 REQUEST_URI_TOO_LONG
            - 415 UNSUPPORTED_MEDIA_TYPE
            - 416 REQUESTED_RANGE_NOT_SATISFIABLE
            - 417 EXPECTATION_FAILED
            - 418 I_AM_A_TEAPOT
            - 419 INSUFFICIENT_SPACE_ON_RESOURCE
            - 420 METHOD_FAILURE
            - 421 DESTINATION_LOCKED
            - 422 UNPROCESSABLE_ENTITY
            - 423 LOCKED
            - 424 FAILED_DEPENDENCY
            - 425 TOO_EARLY
            - 426 UPGRADE_REQUIRED
            - 428 PRECONDITION_REQUIRED
            - 429 TOO_MANY_REQUESTS
            - 431 REQUEST_HEADER_FIELDS_TOO_LARGE
            - 451 UNAVAILABLE_FOR_LEGAL_REASONS
            - 500 INTERNAL_SERVER_ERROR
            - 501 NOT_IMPLEMENTED
            - 502 BAD_GATEWAY
            - 503 SERVICE_UNAVAILABLE
            - 504 GATEWAY_TIMEOUT
            - 505 HTTP_VERSION_NOT_SUPPORTED
            - 506 VARIANT_ALSO_NEGOTIATES
            - 507 INSUFFICIENT_STORAGE
            - 508 LOOP_DETECTED
            - 509 BANDWIDTH_LIMIT_EXCEEDED
            - 510 NOT_EXTENDED
            - 511 NETWORK_AUTHENTICATION_REQUIRED
        code:
          type: integer
          format: int32
        timestamp:
          type: string
          format: date-time
